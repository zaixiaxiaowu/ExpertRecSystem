from langchain.prompts import PromptTemplate
from typing import Any
from ExpertRecSystem.agents.base import Agent
from ExpertRecSystem.utils import read_json


class Explainer(Agent):
    """
    The Explainer class extends the base Agent class to provide detailed explanations
    using a language model. It initializes the language model based on a configuration
    file and builds prompts for generating explanations.
    """

    def __init__(self, config_path: str, *args, **kwargs) -> None:
        """
        Initialize the Explainer with the specified configuration file.

        Args:
            `config_path` (`str`): The path to the configuration file for initializing the explainer.
            `*args` (`Any`): Additional positional arguments for the base class.
            `**kwargs` (`Any`): Additional keyword arguments for the base class.
        """
        super().__init__(*args, **kwargs)
        config = read_json(config_path)
        self.explainer = self.get_LLM(config=config)
        self.json_mode = self.explainer.json_mode

    @property
    def explainer_prompt(self) -> PromptTemplate:
        """
        Property that returns the prompt template for the explainer.

        Returns:
            `PromptTemplate`: The prompt template for generating explanations.
        """
        return self.prompts["explainer_prompt"]

    @property
    def explainer_example(self) -> str:
        """
        Property that returns an example prompt for the explainer.

        Returns:
            `str`: The example prompt if available; otherwise, an empty string.
        """
        if "explainer_example" in self.prompts:
            return self.prompts["explainer_example"]
        else:
            return ""

    def _build_explainer_prompt(self, **kwargs) -> str:
        """
        Build the explainer prompt by formatting the prompt template with provided project
        and expert information.

        Args:
            `project` (`str`): The name or description of the project.
            `experts` (`list`): A list of expert descriptions.

        Returns:
            `str`: The formatted prompt string ready for generating explanations.
        """
        project = kwargs["project"]
        experts = kwargs["experts"]
        prompt = self.explainer_prompt.format(
            example=self.explainer_example,
            project=project,
        )
        for i, des in enumerate(experts, start=1):
            prompt += f"\n专家{i}:{des}\n"

        return prompt

    def forward(self, **kwargs: Any) -> Any:
        """
        Forward pass of the Explainer. Builds the explainer prompt and processes it with the language model.

        Args:
            `**kwargs` (`Any`): The keyword arguments needed to build the explainer prompt.

        Returns:
            `Any`: The response generated by the language model based on the built prompt.
        """
        prompt = self._build_explainer_prompt(**kwargs)
        response = self.explainer(prompt)
        return response
