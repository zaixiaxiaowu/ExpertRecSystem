from langchain.prompts import PromptTemplate
from typing import Any
from ExpertRecSystem.agents.base import Agent
from ExpertRecSystem.utils import read_json


class ProjectAnalyst(Agent):
    """
    The ProjectAnalyst class extends the base Agent class to perform project analysis using a language model.
    It initializes the language model based on a configuration file and builds prompts for project analysis.
    """

    def __init__(self, config_path: str, *args, **kwargs) -> None:
        """
        Initialize the ProjectAnalyst with the specified configuration file.

        Args:
            `config_path` (`str`): The path to the configuration file for initializing the project analyst.
            `*args` (`Any`): Additional positional arguments for the base class.
            `**kwargs` (`Any`): Additional keyword arguments for the base class.
        """
        super().__init__(*args, **kwargs)
        config = read_json(config_path)
        self.project_analyst = self.get_LLM(config=config)
        self.json_mode = self.project_analyst.json_mode

    @property
    def project_analyst_prompt(self) -> PromptTemplate:
        """
        Property that returns the prompt template for the project analyst.

        Returns:
            `PromptTemplate`: The prompt template for project analysis.
        """
        return self.prompts["project_analyst_prompt"]

    @property
    def project_fewshot(self) -> str:
        """
        Property that returns a few-shot example prompt for the project analyst.

        Returns:
            `str`: The few-shot example prompt if available; otherwise, an empty string.
        """
        if "project_fewshot" in self.prompts:
            return self.prompts["project_fewshot"]
        else:
            return ""

    def _build_project_prompt(self, **kwargs) -> str:
        """
        Build the project prompt by formatting the prompt template with provided project information.

        Args:
            `project_name` (`str`): The name of the project.
            `project_infos` (`str`): The detailed information about the project.

        Returns:
            `str`: The formatted prompt string ready for project analysis.
        """
        project_name = kwargs["project_name"]
        project_infos = kwargs["project_infos"]
        prompt = self.project_analyst_prompt.format(
            fewshot=self.project_fewshot,
            project_name=project_name,
            project_infos=project_infos,
        )

        return prompt

    def forward(self, **kwargs: Any) -> Any:
        """
        Forward pass of the ProjectAnalyst. Builds the project prompt and processes it with the language model.

        Args:
            `**kwargs` (`Any`): The keyword arguments needed to build the project prompt.

        Returns:
            `Any`: The response generated by the language model based on the built prompt.
        """
        prompt = self._build_project_prompt(**kwargs)
        response = self.project_analyst(prompt)
        return response
