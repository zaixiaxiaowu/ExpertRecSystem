from langchain.prompts import PromptTemplate
from typing import Any
from ExpertRecSystem.agents.base import Agent
from ExpertRecSystem.utils import read_json


class ExpertAnalyst(Agent):
    """
    The ExpertAnalyst class extends the base Agent class to perform expert analysis using a language model.
    It initializes the language model based on a configuration file and builds prompts for expert analysis.
    """

    def __init__(self, config_path: str, *args, **kwargs) -> None:
        """
        Initialize the ExpertAnalyst with the specified configuration file.

        Args:
            `config_path` (`str`): The path to the configuration file for initializing the expert analyst.
            `*args` (`Any`): Additional positional arguments for the base class.
            `**kwargs` (`Any`): Additional keyword arguments for the base class.
        """
        super().__init__(*args, **kwargs)
        config = read_json(config_path)
        self.expert_analyst = self.get_LLM(config=config)
        self.json_mode = self.expert_analyst.json_mode

    @property
    def expert_analyst_prompt(self) -> PromptTemplate:
        """
        Property that returns the prompt template for the expert analyst.

        Returns:
            `PromptTemplate`: The prompt template for expert analysis.
        """
        return self.prompts["expert_analyst_prompt"]

    def _build_expert_prompt(self, **kwargs) -> str:
        """
        Build the expert prompt by formatting the prompt template with provided expert information.

        Args:
            `expert_name` (`str`): The name of the expert.
            `specialty` (`str`): The specialty of the expert.
            `projects` (`list`): A list of project names associated with the expert.
            `project_infos` (`list`): A list of project information corresponding to the projects.

        Returns:
            `str`: The formatted prompt string ready for expert analysis.
        """
        expert_name = kwargs["expert_name"]
        specialty = kwargs["specialty"]
        projects = kwargs["projects"]
        project_infos = kwargs["project_infos"]
        prompt = self.expert_analyst_prompt.format(
            expert_name=expert_name, specialty=specialty
        )

        for i, (name, info) in enumerate(zip(projects, project_infos), start=1):
            prompt += f"\n{i}.(1)项目名称:{name}\n(2)项目简介:{info}\n"

        return prompt

    def forward(self, **kwargs: Any) -> Any:
        """
        Forward pass of the ExpertAnalyst. Builds the expert prompt and processes it with the language model.

        Args:
            `**kwargs` (`Any`): The keyword arguments needed to build the expert prompt.

        Returns:
            `Any`: The response generated by the language model based on the built prompt.
        """
        prompt = self._build_expert_prompt(**kwargs)
        response = self.expert_analyst(prompt)
        return response
